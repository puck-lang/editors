# [PackageDev] target_format: plist, ext: tmLanguage
name: Puck
scopeName: source.puck
fileTypes: [puck]
uuid: a41aff1d-d311-48de-b928-5f01cc93818b

patterns:
- include: '#expression'

repository:
  comment:
    name: comment.puck
    patterns:
    - include: '#comment-line'

  arithmetic-operator:
    name: keyword.operator.arithmetic.puck
    match: \*\*|\*|/|\-|\+|%

  array-literal:
    name: meta.array.literal.puck
    begin: \[
    beginCaptures:
      '0': {name: meta.brace.square.puck}
    end: \]
    endCaptures:
      '0': {name: meta.brace.square.puck}
    patterns:
    - include: '#expression'

  assignment-operator:
    name: keyword.operator.assignment.puck
    match: \*\*=|\*=|(?<!\()/=|%=|\+=|\-=

  boolean-literal:
    name: constant.language.boolean.puck
    match: \b(false|true)\b

  comment-line:
    name: comment.line.puck
    match: (//).*$\n?

  control-keyword:
    name: keyword.control.puck
    match: (?<!\.)\b(break|continue|debugger|else|for|if let|if|match|return|then|while)\b

  block:
    name: meta.decl.block.puck
    begin: \{
    beginCaptures:
      '0': {name: meta.brace.curly.puck}
    end: \}
    endCaptures:
      '0': {name: meta.brace.curly.puck}
    patterns:
    - include: '#expression'

  declaration:
    name: meta.declaration.puck
    patterns:
    - include: '#let-declaration'
    - include: '#type-declaration'
    - include: '#enum-declaration'
    - include: '#trait-declaration'
    - include: '#impl-declaration'

  expression:
    name: meta.expression.puck
    patterns:
    - include: '#string'
    - include: '#template'
    - include: '#comment'
    - include: '#literal'
    - include: '#paren-expression'
    - include: '#function-declaration'
    # - include: '#lambda-declaration'
    - include: '#declaration'
    - include: '#block'
    - include: '#import-operator'
    - include: '#relational-operator'
    - include: '#arithmetic-operator'
    - include: '#logic-operator'
    - include: '#assignment-operator'
    - include: '#type-primitive'
    - include: '#function-call'
    - include: '#control-keyword'
    - include: '#identifier'

  identifier:
    name: meta.identifier.puck
    match: \b([a-zA-Z_][a-zA-Z0-9_]*)\b
    captures:
      '0': {name: variable.other.puck}

  function-call:
    name: meta.expression.function-call.puck
    begin: (?:\b([a-zA-Z_][a-zA-Z0-9_]*)\b)?\(
    beginCaptures:
      '1': {name: entity.name.function.puck}
    end: \)
    patterns:
    - include: '#expression'

  function-declaration:
    name: meta.function.puck
    begin: \b(?:(export)\s+)?(fn\b)(?:\s+([a-zA-Z_][a-zA-Z0-9_]*))?\s*
    beginCaptures:
      '1': {name: storage.type.puck}
      '2': {name: storage.type.function.puck}
      '3': {name: entity.name.function.puck}
    end: (?=$|\})
    patterns:
    - include: '#comment'
    - include: '#type-parameters'
    - include: '#function-parameters'
    - include: '#function-return-type-bound'
    - include: '#block'

  function-parameters:
    name: meta.function.parameters.puck
    begin: \(
    beginCaptures:
      '0': {name: meta.brace.round.puck}
    end: \)
    endCaptures:
      '0': {name: meta.brace.round.puck}
    patterns:
    - include: '#comment'
    - include: '#mutable-parameter-declaration'
    - include: '#parameter-declaration'

  function-return-type-bound:
    name: meta.function.return-type.puck
    begin: \->
    end: (?=$|\{)
    patterns:
    - include: '#type-bound'

  import-operator:
    name: keyword.control.import.include.puck
    match: \b(import|from)\b

  lambda-declaration:
    name: meta.function.puck
    patterns:
    - include: '#comment'
    - include: '#type-parameters'
    - include: '#lambda-type-parameters'
    - include: '#expression'
    - include: '#block'

  lambda-type-parameters:
    name: meta.function.type.parameter.puck
    begin: \|
    beginCaptures:
      '0': {name: meta.pipe.puck}
    end: \|
    endCaptures:
      '0': {name: meta.pipe.puck}
    patterns:
    - include: '#comment'
    - include: '#parameter-name'
    - include: '#type-annotation'
    - include: '#variable-initializer'

  literal:
    name: literal.puck
    patterns:
    - include: '#numeric-literal'
    - include: '#boolean-literal'
    - include: '#array-literal'
    - include: '#self-literal'

  logic-operator:
    name: keyword.arithmetic.puck
    match: \b(not|and|or)\b

  numeric-literal:
    name: constant.numeric.puck
    match: \b(?<=[^$])((0x[0-9a-fA-F]+)|(0o[0-7]+)|(0b(0|1)+)|(([0-9]+(\.[0-9]+)?))([eE]([+-]?)[0-9]+(\.[0-9]+)?)?)\b

  object-member:
    name: meta.object.member.puck
    begin: '[a-zA-Z_][a-zA-Z0-9_]*\s*:'
    end: (?=,|\})
    patterns:
    - include: '#expression'

  parameter-name:
    name: parameter.name.puck
    match: (?:\s*\b\s+)?(\.\.\.)?\s*([a-zA-Z_][a-zA-Z0-9_]*)\s*(\??)
    captures:
      '1': {name: keyword.others.puck}
      '2': {name: variable.parameter.puck}
      '3': {name: keyword.others.puck}

  paren-expression:
    begin: \(
    beginCaptures:
      '0': {name: meta.brace.paren.puck}
    end: \)
    endCaptures:
      '0': {name: meta.brace.paren.puck}
    patterns:
    - include: '#expression'

  qstring-double:
    name: meta.string.double.puck
    begin: '"'
    beginCaptures:
      '0': {name: string.double.puck}
    end: '"'
    endCaptures:
      '0': {name: string.double.puck}
    patterns:
    - include: '#template-substitution-element'
    - include: '#double-string-contents'

  qstring-single:
    name: meta.string.single.puck
    begin: ''''
    beginCaptures:
      '0': {name: string.single.puck}
    end: ''''
    endCaptures:
      '0': {name: string.single.puck}
    patterns:
    - include: '#template-substitution-element'
    - include: '#single-string-contents'

  # regex:
  #   name: string.regex.puck
  #   begin: (?<=[=(:,\[]|^|return|&&|\|\||!)\s*(/)(?![/*+{}?])
  #   end: $|(/)[igm]*
  #   patterns:
  #   - name: constant.character.escape.puck
  #     match: \\.
  #   - name: constant.character.class.puck
  #     match: \[(\\\]|[^\]])*\]

  relational-operator:
    name: keyword.operator.comparison.puck
    match: ==|!=|<=|>=|=|<|>

  return-type:
    name: meta.return.type.puck
    begin: '(?<=\))\s*:'
    end: (?=$)|(?=\{|;|//)
    patterns:
    - include: '#type-bound'

  self-literal:
    name: variable.language.self.puck
    match: \b(self)\b

  string:
    name: string.puck
    patterns:
    - include: '#qstring-single'
    - include: '#qstring-double'

  string-character-escape:
    name: constant.character.escape
    match: \\(x\h{2}|[0-2][0-7]{,2}|3[0-6][0-7]?|37[0-7]?|[4-7][0-7]?|['"nrt\\]|$)

  double-string-contents:
    name: string.template.puck
    begin: .*?
    end: (?=(\$\{|"))
    patterns:
    - include: '#string-character-escape'

  single-string-contents:
    name: string.template.puck
    begin: .*?
    end: (?=(\$\{|'))
    patterns:
    - include: '#string-character-escape'

  template-substitution-element:
    name: template.element.puck
    begin: \$\{
    end: \}
    patterns:
    - include: '#expression'

  type-primitive:
    name: storage.type.source.puck
    match: \b(Self)\b

  type-bound:
    name: meta.type.puck
    patterns:
    - include: '#type-primitive'
    - include: '#named-type-bound'
    - include: '#tuple-type-bound'
    - include: '#object-type-bound'
    # - include: '#function-type-bound'

  named-type-bound:
    name: meta.type.named.puck
    begin: '\b([a-zA-Z_][a-zA-Z0-9_]*)\b\s*'
    beginCaptures:
      '1': {name: entity.name.type.puck}
    end: (?=[^a-zA-Z0-9_<])
    patterns:
    - include: '#type-parameters'

  tuple-type-bound:
    name: meta.type.tuple.puck
    begin: \(
    end: \)
    patterns:
    - include: '#comment'
    - include: '#tuple-type-bound-member'

  object-type-bound:
    name: meta.type.object.puck
    begin: \{
    end: \}
    patterns:
    - include: '#comment'
    - include: '#object-type-bound-member'

  function-type-bound:
    name: meta.type.function.puck
    patterns:
    - include: '#type-parameters'
    - include: '#function-arguments-type-bound'
    - include: '#type-bound'
    - include: '#type-bound'

  tuple-type-bound-member:
    name: meta.type.tuple.member.puck
    begin: '(?=[^)])'
    end: ',|(?=\))'
    patterns:
    - include: '#type-bound'

  object-type-bound-member:
    name: meta.type.object.member.puck
    begin: '\b([a-zA-Z_][a-zA-Z0-9_]*)\b\s*:\s*'
    beginCaptures:
      '1': {name: entity.name.variable.puck}
    end: '(?=[,}]|(?:\b([a-zA-Z_][a-zA-Z0-9_]*)\b\s*:))'
    patterns:
    - include: '#type-bound'

  function-arguments-type-bound:
    name: meta.type.function.return.puck
    begin: (\())
    beginCaptures:
      '1': {name: meta.paren.puck}
    end: (\))\s*->
    endCaptures:
      '1': {name: meta.paren.puck}
    patterns:
    - include: '#comment'
    - include: '#type-bound'

  type-parameters:
    name: meta.type.parameters.puck
    begin: (<)
    beginCaptures:
      '1': {name: meta.brace.angle.puck}
    end: (>)
    endCaptures:
      '1': {name: meta.brace.angle.puck}
    patterns:
    - name: keyword.other.puck
      match: \b(:)\b
    - include: '#comment'
    - include: '#type-bound'

  type-annotation:
    name: meta.type.annotation.puck
    begin: ':'
    end: (?=$|[;,)=])
    patterns:
    - include: '#comment'
    - include: '#type-bound'

  type-declaration:
    name: meta.type.declaration.puck
    begin: \b(?:(export)\s+)?(type)\b\s*
    beginCaptures:
      '1': {name: storage.type.puck}
      '2': {name: keyword.other.puck}
    end: (?=[)}]|$)
    patterns:
    - include: '#comment'
    - include: '#type-declaration-body'

  type-declaration-body:
    name: meta.type.declaration.body.puck
    begin: \s*\b([a-zA-Z_][a-zA-Z0-9_]*)\s*
    beginCaptures:
      '1': {name: entity.name.type.puck}
    end: (?=[)}]|$)
    patterns:
    - include: '#comment'
    - include: '#type-parameters'
    - include: '#object-type-bound'
    # - include: '#tuple-type-bound'

  enum-declaration:
    name: meta.enum.declaration.puck
    begin: \b(?:(export)\s+)?(enum)\b\s+([a-zA-Z_][a-zA-Z0-9_]*)\s*
    beginCaptures:
      '1': {name: storage.type.puck}
      '2': {name: keyword.other.puck}
      '3': {name: entity.name.type.puck}
    end: (?<=\})
    patterns:
    - include: '#comment'
    - include: '#type-parameters'
    - include: '#type-declaration-body'

  trait-declaration:
    name: meta.trait.declaration.puck
    begin: \b(?:(export)\s+)?(trait)\b\s+([a-zA-Z_][a-zA-Z0-9_]*)\s*
    beginCaptures:
      '1': {name: storage.type.puck}
      '2': {name: keyword.other.puck}
      '3': {name: entity.name.type.puck}
    end: (?<=\})
    patterns:
    - include: '#comment'
    - include: '#type-parameters'
    - include: '#function-declaration'

  impl-declaration:
    name: meta.impl.declaration.puck
    begin: \b(impl)\b
    beginCaptures:
      '1': {name: keyword.other.puck}
    end: (?<=\})
    patterns:
    - include: '#comment'
    - include: '#type-parameters'
    - include: '#impl-declaration-specifier'

  impl-declaration-specifier:
    name: meta.impl.declaration.specifier.puck
    begin: \s*\b([a-zA-Z_][a-zA-Z0-9_]*)\s*
    beginCaptures:
      '1': {name: entity.name.type.puck}
    end: (?<=\})
    patterns:
    - include: '#comment'
    - include: '#type-parameters'
    - include: '#impl-declaration-for-type'
    - include: '#impl-declaration-body'

  impl-declaration-for-type:
    name: meta.impl.short.declaration.for-type.puck
    begin: \b(for)\b\s+([a-zA-Z_][a-zA-Z0-9_]*)\s*
    beginCaptures:
      '1': {name: keyword.other.puck}
      '2': {name: entity.name.type.puck}
    end: (?<=\})
    patterns:
    - include: '#comment'
    - include: '#type-parameters'
    - include: '#impl-declaration-body'

  impl-declaration-body:
    name: meta.impl.short.declaration.body.puck
    begin: \{
    end: (?<=\})
    patterns:
    - include: '#comment'
    - include: '#function-declaration'

  let-declaration:
    name: meta.let.declaration.puck
    begin: \b(let)\b
    beginCaptures:
      '1': {name: storage.type.puck}
    end: (?=$|[;,)])
    patterns:
    - include: '#mutable-variable-declaration'
    - include: '#variable-declaration'

  mutable-parameter-declaration:
    name: meta.mutable.parameter.declaration.puck
    begin: \b(mut)\b\s+(?:(self)|([a-zA-Z_][a-zA-Z0-9_]*))\s*
    beginCaptures:
      '1': {name: storage.type.puck}
      '2': {name: variable.language.self.readwrite.puck}
      '3': {name: variable.parameter.readwrite.puck}
    end: (?=$|[;,)])
    patterns:
    - include: '#type-annotation'
    - include: '#comment'
    - include: '#variable-initializer'

  parameter-declaration:
    name: meta.parameter.declaration.puck
    begin: \b(?:(self)|([a-zA-Z_][a-zA-Z0-9_]*))\s*
    beginCaptures:
      '1': {name: variable.language.self.constant.puck}
      '2': {name: variable.parameter.constant.puck}
    end: (?=$|[;,)])
    patterns:
    - include: '#type-annotation'
    - include: '#comment'
    - include: '#variable-initializer'

  mutable-variable-declaration:
    name: meta.variable.declaration.puck
    begin: \b(mut)\b\s+([a-zA-Z_][a-zA-Z0-9_]*)\s*
    beginCaptures:
      '1': {name: storage.type.puck}
      '2': {name: variable.other.readwrite.puck}
    end: (?=$|[;,)])
    patterns:
    - include: '#type-annotation'
    - include: '#comment'
    - include: '#variable-initializer'

  variable-declaration:
    name: meta.variable.declaration.puck
    begin: \b([a-zA-Z_][a-zA-Z0-9_]*)\s*
    beginCaptures:
      '1': {name: variable.other.constant.puck}
    end: (?=$|[;,)])
    patterns:
    - include: '#type-annotation'
    - include: '#comment'
    - include: '#variable-initializer'

  variable-initializer:
    name: meta.variable.declaration.initializer.puck
    begin: (=)
    beginCaptures:
      '1': {name: keyword.operator.assignment.puck}
    end: (?=$|[;,)])
    patterns:
    - include: '#expression'
