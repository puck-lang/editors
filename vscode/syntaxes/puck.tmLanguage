<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
  <dict>
    <key>name</key>
    <string>Puck</string>
    <key>scopeName</key>
    <string>source.puck</string>
    <key>fileTypes</key>
    <array>
      <string>puck</string>
    </array>
    <key>uuid</key>
    <string>a41aff1d-d311-48de-b928-5f01cc93818b</string>
    <key>patterns</key>
    <array>
      <dict>
        <key>include</key>
        <string>#expression</string>
      </dict>
    </array>
    <key>repository</key>
    <dict>
      <key>comment</key>
      <dict>
        <key>name</key>
        <string>comment.puck</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#comment-line</string>
          </dict>
        </array>
      </dict>
      <key>arithmetic-operator</key>
      <dict>
        <key>name</key>
        <string>keyword.operator.arithmetic.puck</string>
        <key>match</key>
        <string>\*\*|\*|/|\-|\+|%</string>
      </dict>
      <key>array-literal</key>
      <dict>
        <key>name</key>
        <string>meta.array.literal.puck</string>
        <key>begin</key>
        <string>\[</string>
        <key>beginCaptures</key>
        <dict>
          <key>0</key>
          <dict>
            <key>name</key>
            <string>meta.brace.square.puck</string>
          </dict>
        </dict>
        <key>end</key>
        <string>\]</string>
        <key>endCaptures</key>
        <dict>
          <key>0</key>
          <dict>
            <key>name</key>
            <string>meta.brace.square.puck</string>
          </dict>
        </dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#expression</string>
          </dict>
        </array>
      </dict>
      <key>assignment-operator</key>
      <dict>
        <key>name</key>
        <string>keyword.operator.assignment.puck</string>
        <key>match</key>
        <string>\*\*=|\*=|(?&lt;!\()/=|%=|\+=|\-=</string>
      </dict>
      <key>boolean-literal</key>
      <dict>
        <key>name</key>
        <string>constant.language.boolean.puck</string>
        <key>match</key>
        <string>\b(false|true)\b</string>
      </dict>
      <key>comment-line</key>
      <dict>
        <key>name</key>
        <string>comment.line.puck</string>
        <key>match</key>
        <string>(//).*$\n?</string>
      </dict>
      <key>control-keyword</key>
      <dict>
        <key>name</key>
        <string>keyword.control.puck</string>
        <key>match</key>
        <string>(?&lt;!\.)\b(break|continue|debugger|else|for|if let|if|match|return|then|while)\b</string>
      </dict>
      <key>block</key>
      <dict>
        <key>name</key>
        <string>meta.decl.block.puck</string>
        <key>begin</key>
        <string>\{</string>
        <key>beginCaptures</key>
        <dict>
          <key>0</key>
          <dict>
            <key>name</key>
            <string>meta.brace.curly.puck</string>
          </dict>
        </dict>
        <key>end</key>
        <string>\}</string>
        <key>endCaptures</key>
        <dict>
          <key>0</key>
          <dict>
            <key>name</key>
            <string>meta.brace.curly.puck</string>
          </dict>
        </dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#expression</string>
          </dict>
        </array>
      </dict>
      <key>declaration</key>
      <dict>
        <key>name</key>
        <string>meta.declaration.puck</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#let-declaration</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#type-declaration</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#enum-declaration</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#trait-declaration</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#impl-declaration</string>
          </dict>
        </array>
      </dict>
      <key>expression</key>
      <dict>
        <key>name</key>
        <string>meta.expression.puck</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#string</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#template</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#comment</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#literal</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#paren-expression</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#function-declaration</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#declaration</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#block</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#import-operator</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#relational-operator</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#arithmetic-operator</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#logic-operator</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#assignment-operator</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#type-primitive</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#function-call</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#control-keyword</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#identifier</string>
          </dict>
        </array>
      </dict>
      <key>identifier</key>
      <dict>
        <key>name</key>
        <string>meta.identifier.puck</string>
        <key>match</key>
        <string>\b([a-zA-Z_][a-zA-Z0-9_]*)\b</string>
        <key>captures</key>
        <dict>
          <key>0</key>
          <dict>
            <key>name</key>
            <string>variable.other.puck</string>
          </dict>
        </dict>
      </dict>
      <key>function-call</key>
      <dict>
        <key>name</key>
        <string>meta.expression.function-call.puck</string>
        <key>begin</key>
        <string>(?:\b([a-zA-Z_][a-zA-Z0-9_]*)\b)?\(</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>entity.name.function.puck</string>
          </dict>
        </dict>
        <key>end</key>
        <string>\)</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#expression</string>
          </dict>
        </array>
      </dict>
      <key>function-declaration</key>
      <dict>
        <key>name</key>
        <string>meta.function.puck</string>
        <key>begin</key>
        <string>\b(?:(export)\s+)?(fn\b)(?:\s+([a-zA-Z_][a-zA-Z0-9_]*))?\s*</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>storage.type.puck</string>
          </dict>
          <key>2</key>
          <dict>
            <key>name</key>
            <string>storage.type.function.puck</string>
          </dict>
          <key>3</key>
          <dict>
            <key>name</key>
            <string>entity.name.function.puck</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(?=$|\})</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#comment</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#type-parameters</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#function-parameters</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#function-return-type-bound</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#block</string>
          </dict>
        </array>
      </dict>
      <key>function-parameters</key>
      <dict>
        <key>name</key>
        <string>meta.function.parameters.puck</string>
        <key>begin</key>
        <string>\(</string>
        <key>beginCaptures</key>
        <dict>
          <key>0</key>
          <dict>
            <key>name</key>
            <string>meta.brace.round.puck</string>
          </dict>
        </dict>
        <key>end</key>
        <string>\)</string>
        <key>endCaptures</key>
        <dict>
          <key>0</key>
          <dict>
            <key>name</key>
            <string>meta.brace.round.puck</string>
          </dict>
        </dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#comment</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#mutable-parameter-declaration</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#parameter-declaration</string>
          </dict>
        </array>
      </dict>
      <key>function-return-type-bound</key>
      <dict>
        <key>name</key>
        <string>meta.function.return-type.puck</string>
        <key>begin</key>
        <string>\-&gt;</string>
        <key>end</key>
        <string>(?=$|\{)</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#type-bound</string>
          </dict>
        </array>
      </dict>
      <key>import-operator</key>
      <dict>
        <key>name</key>
        <string>keyword.control.import.include.puck</string>
        <key>match</key>
        <string>\b(import|from)\b</string>
      </dict>
      <key>lambda-declaration</key>
      <dict>
        <key>name</key>
        <string>meta.function.puck</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#comment</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#type-parameters</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#lambda-type-parameters</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#expression</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#block</string>
          </dict>
        </array>
      </dict>
      <key>lambda-type-parameters</key>
      <dict>
        <key>name</key>
        <string>meta.function.type.parameter.puck</string>
        <key>begin</key>
        <string>\|</string>
        <key>beginCaptures</key>
        <dict>
          <key>0</key>
          <dict>
            <key>name</key>
            <string>meta.pipe.puck</string>
          </dict>
        </dict>
        <key>end</key>
        <string>\|</string>
        <key>endCaptures</key>
        <dict>
          <key>0</key>
          <dict>
            <key>name</key>
            <string>meta.pipe.puck</string>
          </dict>
        </dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#comment</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#parameter-name</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#type-annotation</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#variable-initializer</string>
          </dict>
        </array>
      </dict>
      <key>literal</key>
      <dict>
        <key>name</key>
        <string>literal.puck</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#numeric-literal</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#boolean-literal</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#array-literal</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#self-literal</string>
          </dict>
        </array>
      </dict>
      <key>logic-operator</key>
      <dict>
        <key>name</key>
        <string>keyword.arithmetic.puck</string>
        <key>match</key>
        <string>\b(not|and|or)\b</string>
      </dict>
      <key>numeric-literal</key>
      <dict>
        <key>name</key>
        <string>constant.numeric.puck</string>
        <key>match</key>
        <string>\b(?&lt;=[^$])((0x[0-9a-fA-F]+)|(0o[0-7]+)|(0b(0|1)+)|(([0-9]+(\.[0-9]+)?))([eE]([+-]?)[0-9]+(\.[0-9]+)?)?)\b</string>
      </dict>
      <key>object-member</key>
      <dict>
        <key>name</key>
        <string>meta.object.member.puck</string>
        <key>begin</key>
        <string>[a-zA-Z_][a-zA-Z0-9_]*\s*:</string>
        <key>end</key>
        <string>(?=,|\})</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#expression</string>
          </dict>
        </array>
      </dict>
      <key>parameter-name</key>
      <dict>
        <key>name</key>
        <string>parameter.name.puck</string>
        <key>match</key>
        <string>(?:\s*\b\s+)?(\.\.\.)?\s*([a-zA-Z_][a-zA-Z0-9_]*)\s*(\??)</string>
        <key>captures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.others.puck</string>
          </dict>
          <key>2</key>
          <dict>
            <key>name</key>
            <string>variable.parameter.puck</string>
          </dict>
          <key>3</key>
          <dict>
            <key>name</key>
            <string>keyword.others.puck</string>
          </dict>
        </dict>
      </dict>
      <key>paren-expression</key>
      <dict>
        <key>begin</key>
        <string>\(</string>
        <key>beginCaptures</key>
        <dict>
          <key>0</key>
          <dict>
            <key>name</key>
            <string>meta.brace.paren.puck</string>
          </dict>
        </dict>
        <key>end</key>
        <string>\)</string>
        <key>endCaptures</key>
        <dict>
          <key>0</key>
          <dict>
            <key>name</key>
            <string>meta.brace.paren.puck</string>
          </dict>
        </dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#expression</string>
          </dict>
        </array>
      </dict>
      <key>qstring-double</key>
      <dict>
        <key>name</key>
        <string>meta.string.double.puck</string>
        <key>begin</key>
        <string>"</string>
        <key>beginCaptures</key>
        <dict>
          <key>0</key>
          <dict>
            <key>name</key>
            <string>string.double.puck</string>
          </dict>
        </dict>
        <key>end</key>
        <string>"</string>
        <key>endCaptures</key>
        <dict>
          <key>0</key>
          <dict>
            <key>name</key>
            <string>string.double.puck</string>
          </dict>
        </dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#template-substitution-element</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#double-string-contents</string>
          </dict>
        </array>
      </dict>
      <key>qstring-single</key>
      <dict>
        <key>name</key>
        <string>meta.string.single.puck</string>
        <key>begin</key>
        <string>'</string>
        <key>beginCaptures</key>
        <dict>
          <key>0</key>
          <dict>
            <key>name</key>
            <string>string.single.puck</string>
          </dict>
        </dict>
        <key>end</key>
        <string>'</string>
        <key>endCaptures</key>
        <dict>
          <key>0</key>
          <dict>
            <key>name</key>
            <string>string.single.puck</string>
          </dict>
        </dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#template-substitution-element</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#single-string-contents</string>
          </dict>
        </array>
      </dict>
      <key>relational-operator</key>
      <dict>
        <key>name</key>
        <string>keyword.operator.comparison.puck</string>
        <key>match</key>
        <string>==|!=|&lt;=|&gt;=|=|&lt;|&gt;</string>
      </dict>
      <key>return-type</key>
      <dict>
        <key>name</key>
        <string>meta.return.type.puck</string>
        <key>begin</key>
        <string>(?&lt;=\))\s*:</string>
        <key>end</key>
        <string>(?=$)|(?=\{|;|//)</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#type-bound</string>
          </dict>
        </array>
      </dict>
      <key>self-literal</key>
      <dict>
        <key>name</key>
        <string>variable.language.self.puck</string>
        <key>match</key>
        <string>\b(self)\b</string>
      </dict>
      <key>string</key>
      <dict>
        <key>name</key>
        <string>string.puck</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#qstring-single</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#qstring-double</string>
          </dict>
        </array>
      </dict>
      <key>string-character-escape</key>
      <dict>
        <key>name</key>
        <string>constant.character.escape</string>
        <key>match</key>
        <string>\\(x\h{2}|[0-2][0-7]{,2}|3[0-6][0-7]?|37[0-7]?|[4-7][0-7]?|['"nrt\\]|$)</string>
      </dict>
      <key>double-string-contents</key>
      <dict>
        <key>name</key>
        <string>string.template.puck</string>
        <key>begin</key>
        <string>.*?</string>
        <key>end</key>
        <string>(?=(\$\{|"))</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#string-character-escape</string>
          </dict>
        </array>
      </dict>
      <key>single-string-contents</key>
      <dict>
        <key>name</key>
        <string>string.template.puck</string>
        <key>begin</key>
        <string>.*?</string>
        <key>end</key>
        <string>(?=(\$\{|'))</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#string-character-escape</string>
          </dict>
        </array>
      </dict>
      <key>template-substitution-element</key>
      <dict>
        <key>name</key>
        <string>template.element.puck</string>
        <key>begin</key>
        <string>\$\{</string>
        <key>end</key>
        <string>\}</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#expression</string>
          </dict>
        </array>
      </dict>
      <key>type-primitive</key>
      <dict>
        <key>name</key>
        <string>storage.type.source.puck</string>
        <key>match</key>
        <string>\b(Self)\b</string>
      </dict>
      <key>type-bound</key>
      <dict>
        <key>name</key>
        <string>meta.type.puck</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#type-primitive</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#named-type-bound</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#tuple-type-bound</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#record-type-bound</string>
          </dict>
        </array>
      </dict>
      <key>named-type-bound</key>
      <dict>
        <key>name</key>
        <string>meta.type.named.puck</string>
        <key>begin</key>
        <string>\b([a-zA-Z_][a-zA-Z0-9_]*)\b\s*</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>entity.name.type.puck</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(?=[^a-zA-Z0-9_&lt;])</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#type-parameters</string>
          </dict>
        </array>
      </dict>
      <key>tuple-type-bound</key>
      <dict>
        <key>name</key>
        <string>meta.type.tuple.puck</string>
        <key>begin</key>
        <string>\(</string>
        <key>end</key>
        <string>\)</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#comment</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#tuple-type-bound-member</string>
          </dict>
        </array>
      </dict>
      <key>record-type-bound</key>
      <dict>
        <key>name</key>
        <string>meta.type.record.puck</string>
        <key>begin</key>
        <string>\{</string>
        <key>end</key>
        <string>\}</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#comment</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#record-type-bound-member</string>
          </dict>
        </array>
      </dict>
      <key>function-type-bound</key>
      <dict>
        <key>name</key>
        <string>meta.type.function.puck</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#type-parameters</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#function-arguments-type-bound</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#type-bound</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#type-bound</string>
          </dict>
        </array>
      </dict>
      <key>tuple-type-bound-member</key>
      <dict>
        <key>name</key>
        <string>meta.type.tuple.member.puck</string>
        <key>begin</key>
        <string>(?=[^)])</string>
        <key>end</key>
        <string>,|(?=\))</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#type-bound</string>
          </dict>
        </array>
      </dict>
      <key>record-type-bound-member</key>
      <dict>
        <key>name</key>
        <string>meta.type.record.member.puck</string>
        <key>begin</key>
        <string>\b([a-zA-Z_][a-zA-Z0-9_]*)\b\s*:\s*</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>entity.name.variable.puck</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(?=[^a-zA-Z0-9_&lt;])</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#type-bound</string>
          </dict>
        </array>
      </dict>
      <key>function-arguments-type-bound</key>
      <dict>
        <key>name</key>
        <string>meta.type.function.return.puck</string>
        <key>begin</key>
        <string>(\())</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>meta.paren.puck</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(\))\s*-&gt;</string>
        <key>endCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>meta.paren.puck</string>
          </dict>
        </dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#comment</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#type-bound</string>
          </dict>
        </array>
      </dict>
      <key>type-parameters</key>
      <dict>
        <key>name</key>
        <string>meta.type.parameters.puck</string>
        <key>begin</key>
        <string>(&lt;)</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>meta.brace.angle.puck</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(&gt;)</string>
        <key>endCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>meta.brace.angle.puck</string>
          </dict>
        </dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>name</key>
            <string>keyword.other.puck</string>
            <key>match</key>
            <string>\b(:)\b</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#comment</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#type-bound</string>
          </dict>
        </array>
      </dict>
      <key>type-annotation</key>
      <dict>
        <key>name</key>
        <string>meta.type.annotation.puck</string>
        <key>begin</key>
        <string>:</string>
        <key>end</key>
        <string>(?=$|[;,)=])</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#comment</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#type-bound</string>
          </dict>
        </array>
      </dict>
      <key>type-declaration</key>
      <dict>
        <key>name</key>
        <string>meta.type.declaration.puck</string>
        <key>begin</key>
        <string>\b(?:(export)\s+)?(type)\b\s*</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>storage.type.puck</string>
          </dict>
          <key>2</key>
          <dict>
            <key>name</key>
            <string>keyword.other.puck</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(?=[)}]|$)</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#comment</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#type-declaration-body</string>
          </dict>
        </array>
      </dict>
      <key>type-declaration-body</key>
      <dict>
        <key>name</key>
        <string>meta.type.declaration.body.puck</string>
        <key>begin</key>
        <string>\s*\b([a-zA-Z_][a-zA-Z0-9_]*)\s*</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>entity.name.type.puck</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(?=[)}]|$)</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#comment</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#type-parameters</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#record-type-bound</string>
          </dict>
        </array>
      </dict>
      <key>enum-declaration</key>
      <dict>
        <key>name</key>
        <string>meta.enum.declaration.puck</string>
        <key>begin</key>
        <string>\b(?:(export)\s+)?(enum)\b\s+([a-zA-Z_][a-zA-Z0-9_]*)\s*</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>storage.type.puck</string>
          </dict>
          <key>2</key>
          <dict>
            <key>name</key>
            <string>keyword.other.puck</string>
          </dict>
          <key>3</key>
          <dict>
            <key>name</key>
            <string>entity.name.type.puck</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(?&lt;=\})</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#comment</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#type-parameters</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#type-declaration-body</string>
          </dict>
        </array>
      </dict>
      <key>trait-declaration</key>
      <dict>
        <key>name</key>
        <string>meta.trait.declaration.puck</string>
        <key>begin</key>
        <string>\b(?:(export)\s+)?(trait)\b\s+([a-zA-Z_][a-zA-Z0-9_]*)\s*</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>storage.type.puck</string>
          </dict>
          <key>2</key>
          <dict>
            <key>name</key>
            <string>keyword.other.puck</string>
          </dict>
          <key>3</key>
          <dict>
            <key>name</key>
            <string>entity.name.type.puck</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(?&lt;=\})</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#comment</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#type-parameters</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#function-declaration</string>
          </dict>
        </array>
      </dict>
      <key>impl-declaration</key>
      <dict>
        <key>name</key>
        <string>meta.impl.declaration.puck</string>
        <key>begin</key>
        <string>\b(impl)\b</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.other.puck</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(?&lt;=\})</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#comment</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#type-parameters</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#impl-declaration-specifier</string>
          </dict>
        </array>
      </dict>
      <key>impl-declaration-specifier</key>
      <dict>
        <key>name</key>
        <string>meta.impl.declaration.specifier.puck</string>
        <key>begin</key>
        <string>\s*\b([a-zA-Z_][a-zA-Z0-9_]*)\s*</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>entity.name.type.puck</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(?&lt;=\})</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#comment</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#type-parameters</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#impl-declaration-for-type</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#impl-declaration-body</string>
          </dict>
        </array>
      </dict>
      <key>impl-declaration-for-type</key>
      <dict>
        <key>name</key>
        <string>meta.impl.short.declaration.for-type.puck</string>
        <key>begin</key>
        <string>\b(for)\b\s+([a-zA-Z_][a-zA-Z0-9_]*)\s*</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.other.puck</string>
          </dict>
          <key>2</key>
          <dict>
            <key>name</key>
            <string>entity.name.type.puck</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(?&lt;=\})</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#comment</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#type-parameters</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#impl-declaration-body</string>
          </dict>
        </array>
      </dict>
      <key>impl-declaration-body</key>
      <dict>
        <key>name</key>
        <string>meta.impl.short.declaration.body.puck</string>
        <key>begin</key>
        <string>\{</string>
        <key>end</key>
        <string>(?&lt;=\})</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#comment</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#function-declaration</string>
          </dict>
        </array>
      </dict>
      <key>let-declaration</key>
      <dict>
        <key>name</key>
        <string>meta.let.declaration.puck</string>
        <key>begin</key>
        <string>\b(let)\b</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>storage.type.puck</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(?=$|[;,)])</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#mutable-variable-declaration</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#variable-declaration</string>
          </dict>
        </array>
      </dict>
      <key>mutable-parameter-declaration</key>
      <dict>
        <key>name</key>
        <string>meta.mutable.parameter.declaration.puck</string>
        <key>begin</key>
        <string>\b(mut)\b\s+(?:(self)|([a-zA-Z_][a-zA-Z0-9_]*))\s*</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>storage.type.puck</string>
          </dict>
          <key>2</key>
          <dict>
            <key>name</key>
            <string>variable.language.self.readwrite.puck</string>
          </dict>
          <key>3</key>
          <dict>
            <key>name</key>
            <string>variable.parameter.readwrite.puck</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(?=$|[;,)])</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#type-annotation</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#comment</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#variable-initializer</string>
          </dict>
        </array>
      </dict>
      <key>parameter-declaration</key>
      <dict>
        <key>name</key>
        <string>meta.parameter.declaration.puck</string>
        <key>begin</key>
        <string>\b(?:(self)|([a-zA-Z_][a-zA-Z0-9_]*))\s*</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>variable.language.self.constant.puck</string>
          </dict>
          <key>2</key>
          <dict>
            <key>name</key>
            <string>variable.parameter.constant.puck</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(?=$|[;,)])</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#type-annotation</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#comment</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#variable-initializer</string>
          </dict>
        </array>
      </dict>
      <key>mutable-variable-declaration</key>
      <dict>
        <key>name</key>
        <string>meta.variable.declaration.puck</string>
        <key>begin</key>
        <string>\b(mut)\b\s+([a-zA-Z_][a-zA-Z0-9_]*)\s*</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>storage.type.puck</string>
          </dict>
          <key>2</key>
          <dict>
            <key>name</key>
            <string>variable.other.readwrite.puck</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(?=$|[;,)])</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#type-annotation</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#comment</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#variable-initializer</string>
          </dict>
        </array>
      </dict>
      <key>variable-declaration</key>
      <dict>
        <key>name</key>
        <string>meta.variable.declaration.puck</string>
        <key>begin</key>
        <string>\b([a-zA-Z_][a-zA-Z0-9_]*)\s*</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>variable.other.constant.puck</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(?=$|[;,)])</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#type-annotation</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#comment</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#variable-initializer</string>
          </dict>
        </array>
      </dict>
      <key>variable-initializer</key>
      <dict>
        <key>name</key>
        <string>meta.variable.declaration.initializer.puck</string>
        <key>begin</key>
        <string>(=)</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.operator.assignment.puck</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(?=$|[;,)])</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#expression</string>
          </dict>
        </array>
      </dict>
    </dict>
  </dict>
</plist>