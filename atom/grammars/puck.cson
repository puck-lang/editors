fileTypes: [
  "puck"
]
name: "Puck"
patterns: [
  {
    include: "#expression"
  }
]
repository:
  "arithmetic-operator":
    match: "\\*\\*|\\*|/|\\-|\\+|%"
    name: "keyword.operator.arithmetic.puck"
  "array-literal":
    begin: "\\["
    beginCaptures:
      "0":
        name: "meta.brace.square.puck"
    end: "\\]"
    endCaptures:
      "0":
        name: "meta.brace.square.puck"
    name: "meta.array.literal.puck"
    patterns: [
      {
        include: "#expression"
      }
    ]
  "assignment-operator":
    match: "\\*\\*=|\\*=|(?<!\\()/=|%=|\\+=|\\-="
    name: "keyword.operator.assignment.puck"
  block:
    begin: "\\{"
    beginCaptures:
      "0":
        name: "meta.brace.curly.puck"
    end: "\\}"
    endCaptures:
      "0":
        name: "meta.brace.curly.puck"
    name: "meta.decl.block.puck"
    patterns: [
      {
        include: "#expression"
      }
    ]
  "boolean-literal":
    match: "\\b(false|true)\\b"
    name: "constant.language.boolean.puck"
  comment:
    name: "comment.puck"
    patterns: [
      {
        include: "#comment-line"
      }
    ]
  "comment-line":
    match: "(//).*$\\n?"
    name: "comment.line.puck"
  "control-keyword":
    match: "(?<!\\.)\\b(break|continue|debugger|else|for|if let|if|match|return|self|then|while)\\b"
    name: "keyword.control.puck"
  declaration:
    name: "meta.declaration.puck"
    patterns: [
      {
        include: "#let-declaration"
      }
      {
        include: "#type-declaration"
      }
      {
        include: "#enum-declaration"
      }
      {
        include: "#trait-declaration"
      }
      {
        include: "#impl-declaration"
      }
      {
        include: "#implShort-declaration"
      }
    ]
  "double-string-contents":
    begin: ".*?"
    end: "(?=(\\$\\{|\"))"
    name: "string.template.puck"
    patterns: [
      {
        include: "#string-character-escape"
      }
    ]
  "enum-declaration":
    begin: "\\b(?:(export)\\s+)?(enum)\\b\\s+([a-zA-Z_]\\w*)\\s*"
    beginCaptures:
      "1":
        name: "storage.type.puck"
      "2":
        name: "keyword.other.puck"
      "3":
        name: "entity.name.type.puck"
    end: "(?<=\\})"
    name: "meta.enum.declaration.puck"
    patterns: [
      {
        include: "#type-parameters"
      }
      {
        include: "#type-declaration-body"
      }
    ]
  expression:
    name: "meta.expression.puck"
    patterns: [
      {
        include: "#string"
      }
      {
        include: "#template"
      }
      {
        include: "#comment"
      }
      {
        include: "#literal"
      }
      {
        include: "#paren-expression"
      }
      {
        include: "#function-declaration"
      }
      {
        include: "#declaration"
      }
      {
        include: "#block"
      }
      {
        include: "#import-operator"
      }
      {
        include: "#relational-operator"
      }
      {
        include: "#arithmetic-operator"
      }
      {
        include: "#logic-operator"
      }
      {
        include: "#assignment-operator"
      }
      {
        include: "#type-primitive"
      }
      {
        include: "#function-call"
      }
      {
        include: "#control-keyword"
      }
      {
        include: "#identifier"
      }
    ]
  "function-arguments-type-bound":
    begin: "(\\())"
    beginCaptures:
      "1":
        name: "meta.paren.puck"
    end: "(\\))\\s*->"
    endCaptures:
      "1":
        name: "meta.paren.puck"
    name: "meta.type.function.return.puck"
    patterns: [
      {
        include: "#type-bound"
      }
    ]
  "function-call":
    name: "functioncall.expr.puck"
    patterns: [
      {
        include: "#type-parameters"
      }
      {
        include: "#paren-expression"
      }
    ]
  "function-declaration":
    begin: "\\b(?:(export)\\s+)?(fn\\b)(?:\\s+([a-zA-Z_]\\w*))?\\s*"
    beginCaptures:
      "1":
        name: "storage.type.puck"
      "2":
        name: "storage.type.function.puck"
      "3":
        name: "entity.name.function.puck"
    end: "(?=$|\\})"
    name: "meta.function.puck"
    patterns: [
      {
        include: "#comment"
      }
      {
        include: "#type-parameters"
      }
      {
        include: "#function-parameters"
      }
      {
        include: "#function-return-type-bound"
      }
      {
        include: "#block"
      }
    ]
  "function-parameters":
    begin: "\\("
    beginCaptures:
      "0":
        name: "meta.brace.round.puck"
    end: "\\)"
    endCaptures:
      "0":
        name: "meta.brace.round.puck"
    name: "meta.function.parameters.puck"
    patterns: [
      {
        include: "#comment"
      }
      {
        include: "#mutable-parameter-declaration"
      }
      {
        include: "#parameter-declaration"
      }
    ]
  "function-return-type-bound":
    begin: "\\->"
    end: "(?=$|\\{)"
    name: "meta.function.return-type.puck"
    patterns: [
      {
        include: "#type-bound"
      }
    ]
  "function-type-bound":
    name: "meta.type.function.puck"
    patterns: [
      {
        include: "#type-parameters"
      }
      {
        include: "#function-arguments-type-bound"
      }
      {
        include: "#type-bound"
      }
      {
        include: "#type-bound"
      }
    ]
  identifier:
    captures:
      "0":
        name: "variable.other.puck"
    match: "\\b([a-zA-Z_][\\w]*)\\b"
    name: "meta.identifier.puck"
  "impl-declaration":
    begin: "\\b(impl)\\b\\s+([a-zA-Z_]\\w*)\\s*\\b(for)\\b\\s+([a-zA-Z_]\\w*)\\s*"
    beginCaptures:
      "1":
        name: "keyword.other.puck"
      "2":
        name: "entity.name.type.puck"
      "3":
        name: "keyword.other.puck"
      "4":
        name: "entity.name.type.puck"
    end: "(?<=\\})"
    name: "meta.impl.declaration.puck"
    patterns: [
      {
        include: "#function-declaration"
      }
    ]
  "implShort-declaration":
    begin: "\\b(impl)\\b\\s+([a-zA-Z_]\\w*)\\s*"
    beginCaptures:
      "1":
        name: "keyword.other.puck"
      "2":
        name: "entity.name.type.puck"
    end: "(?<=\\})"
    name: "meta.implShort.declaration.puck"
    patterns: [
      {
        include: "#function-declaration"
      }
    ]
  "import-operator":
    match: "\\b(import|from)\\b"
    name: "keyword.control.import.include.puck"
  "lambda-declaration":
    name: "meta.function.puck"
    patterns: [
      {
        include: "#comment"
      }
      {
        include: "#type-parameters"
      }
      {
        include: "#lambda-type-parameters"
      }
      {
        include: "#expression"
      }
      {
        include: "#block"
      }
    ]
  "lambda-type-parameters":
    begin: "\\|"
    beginCaptures:
      "0":
        name: "meta.pipe.puck"
    end: "\\|"
    endCaptures:
      "0":
        name: "meta.pipe.puck"
    name: "meta.function.type.parameter.puck"
    patterns: [
      {
        include: "#comment"
      }
      {
        include: "#parameter-name"
      }
      {
        include: "#type-annotation"
      }
      {
        include: "#variable-initializer"
      }
    ]
  "let-declaration":
    begin: "\\b(let)\\b"
    beginCaptures:
      "1":
        name: "storage.type.puck"
    end: "(?=$|[;,)])"
    name: "meta.let.declaration.puck"
    patterns: [
      {
        include: "#mutable-variable-declaration"
      }
      {
        include: "#variable-declaration"
      }
    ]
  literal:
    name: "literal.puck"
    patterns: [
      {
        include: "#numeric-literal"
      }
      {
        include: "#boolean-literal"
      }
      {
        include: "#array-literal"
      }
      {
        include: "#self-literal"
      }
    ]
  "logic-operator":
    match: "\\b(not|and|or)\\b"
    name: "keyword.arithmetic.puck"
  "mutable-parameter-declaration":
    begin: "\\b(mut)\\b\\s+([a-zA-Z_]\\w*)\\s*"
    beginCaptures:
      "1":
        name: "storage.type.puck"
      "2":
        name: "variable.parameter.readwrite.puck"
    end: "(?=$|[;,)])"
    name: "meta.parameter.declaration.puck"
    patterns: [
      {
        include: "#type-annotation"
      }
      {
        include: "#comment"
      }
      {
        include: "#variable-initializer"
      }
    ]
  "mutable-variable-declaration":
    begin: "\\b(mut)\\b\\s+([a-zA-Z_]\\w*)\\s*"
    beginCaptures:
      "1":
        name: "storage.type.puck"
      "2":
        name: "variable.other.readwrite.puck"
    end: "(?=$|[;,)])"
    name: "meta.variable.declaration.puck"
    patterns: [
      {
        include: "#type-annotation"
      }
      {
        include: "#comment"
      }
      {
        include: "#variable-initializer"
      }
    ]
  "named-type-bound":
    captures:
      "1":
        name: "entity.name.type.puck"
    match: "\\b([a-zA-Z_][\\w]*)\\b\\s*"
    name: "meta.type.named.puck"
    patterns: [
      {
        include: "#type-parameters"
      }
    ]
  "numeric-literal":
    match: "\\b(?<=[^$])((0x[0-9a-fA-F]+)|(0o[0-7]+)|(0b(0|1)+)|(([0-9]+(\\.[0-9]+)?))([eE]([+-]?)[0-9]+(\\.[0-9]+)?)?)\\b"
    name: "constant.numeric.puck"
  "object-member":
    begin: "[a-zA-Z_]\\w*\\s*:"
    end: "(?=,|\\})"
    name: "meta.object.member.puck"
    patterns: [
      {
        include: "#expression"
      }
    ]
  "object-type-bound":
    begin: "\\{"
    end: "\\}"
    name: "meta.type.object.puck"
    patterns: [
      {
        include: "#object-type-bound-member"
      }
    ]
  "object-type-bound-member":
    begin: "\\b([a-zA-Z_][\\w]*)\\b\\s*:\\s*"
    beginCaptures:
      "1":
        name: "entity.name.variable.puck"
    end: "(?=[,}]|(?:\\b([a-zA-Z_][\\w]*)\\b\\s*:))"
    name: "meta.type.object.member.puck"
    patterns: [
      {
        include: "#type-bound"
      }
    ]
  "parameter-declaration":
    begin: "\\b([a-zA-Z_]\\w*)\\s*"
    beginCaptures:
      "1":
        name: "variable.parameter.constant.puck"
    end: "(?=$|[;,)])"
    name: "meta.parameter.declaration.puck"
    patterns: [
      {
        include: "#type-annotation"
      }
      {
        include: "#comment"
      }
      {
        include: "#variable-initializer"
      }
    ]
  "parameter-name":
    captures:
      "1":
        name: "keyword.others.puck"
      "2":
        name: "variable.parameter.puck"
      "3":
        name: "keyword.others.puck"
    match: "(?:\\s*\\b\\s+)?(\\.\\.\\.)?\\s*([a-zA-Z_]\\w*)\\s*(\\??)"
    name: "parameter.name.puck"
  "paren-expression":
    begin: "\\("
    beginCaptures:
      "0":
        name: "meta.brace.paren.puck"
    end: "\\)"
    endCaptures:
      "0":
        name: "meta.brace.paren.puck"
    patterns: [
      {
        include: "#expression"
      }
    ]
  "qstring-double":
    begin: "\""
    beginCaptures:
      "0":
        name: "string.double.puck"
    end: "\""
    endCaptures:
      "0":
        name: "string.double.puck"
    name: "meta.string.double.puck"
    patterns: [
      {
        include: "#template-substitution-element"
      }
      {
        include: "#double-string-contents"
      }
    ]
  "qstring-single":
    begin: "'"
    beginCaptures:
      "0":
        name: "string.single.puck"
    end: "'"
    endCaptures:
      "0":
        name: "string.single.puck"
    name: "meta.string.single.puck"
    patterns: [
      {
        include: "#template-substitution-element"
      }
      {
        include: "#single-string-contents"
      }
    ]
  "relational-operator":
    match: "==|!=|<=|>=|=|<|>"
    name: "keyword.operator.comparison.puck"
  "return-type":
    begin: "(?<=\\))\\s*:"
    end: "(?=$)|(?=\\{|;|//)"
    name: "meta.return.type.puck"
    patterns: [
      {
        include: "#type-bound"
      }
    ]
  "self-literal":
    match: "\\b(self)\\b"
    name: "variable.language.self.puck"
  "single-string-contents":
    begin: ".*?"
    end: "(?=(\\$\\{|'))"
    name: "string.template.puck"
    patterns: [
      {
        include: "#string-character-escape"
      }
    ]
  string:
    name: "string.puck"
    patterns: [
      {
        include: "#qstring-single"
      }
      {
        include: "#qstring-double"
      }
    ]
  "string-character-escape":
    match: "\\\\(x\\h{2}|[0-2][0-7]{,2}|3[0-6][0-7]?|37[0-7]?|[4-7][0-7]?|['\"nrt\\\\]|$)"
    name: "constant.character.escape"
  "template-substitution-element":
    begin: "\\$\\{"
    end: "\\}"
    name: "template.element.puck"
    patterns: [
      {
        include: "#expression"
      }
    ]
  "trait-declaration":
    begin: "\\b(?:(export)\\s+)?(trait)\\b\\s+([a-zA-Z_]\\w*)\\s*"
    beginCaptures:
      "1":
        name: "storage.type.puck"
      "2":
        name: "keyword.other.puck"
      "3":
        name: "entity.name.type.puck"
    end: "(?<=\\})"
    name: "meta.trait.declaration.puck"
    patterns: [
      {
        include: "#type-parameters"
      }
      {
        include: "#function-declaration"
      }
    ]
  "tuple-type-bound":
    begin: "\\("
    end: "\\)"
    name: "meta.type.tuple.puck"
    patterns: [
      {
        include: "#tuple-type-bound-member"
      }
    ]
  "tuple-type-bound-member":
    begin: "(?=[^)])"
    end: ",|(?=\\))"
    name: "meta.type.tuple.member.puck"
    patterns: [
      {
        include: "#type-bound"
      }
    ]
  "type-annotation":
    begin: ":"
    end: "(?=$|[;,)=])"
    name: "meta.type.annotation.puck"
    patterns: [
      {
        include: "#type-bound"
      }
    ]
  "type-bound":
    name: "meta.type.puck"
    patterns: [
      {
        include: "#type-primitive"
      }
      {
        include: "#named-type-bound"
      }
      {
        include: "#tuple-type-bound"
      }
      {
        include: "#object-type-bound"
      }
    ]
  "type-declaration":
    begin: "\\b(?:(export)\\s+)?(type)\\b\\s*"
    beginCaptures:
      "1":
        name: "storage.type.puck"
      "2":
        name: "keyword.other.puck"
    end: "(?=[)}]|$)"
    name: "meta.type.declaration.puck"
    patterns: [
      {
        include: "#type-declaration-body"
      }
    ]
  "type-declaration-body":
    begin: "\\s*\\b([a-zA-Z_]\\w*)\\s*"
    beginCaptures:
      "1":
        name: "entity.name.type.puck"
    end: "(?=[)}]|$)"
    name: "meta.type.declaration.body.puck"
    patterns: [
      {
        include: "#type-parameters"
      }
      {
        include: "#object-type-bound"
      }
    ]
  "type-parameters":
    begin: "(<)"
    beginCaptures:
      "0":
        name: "meta.brace.angle.puck"
    end: "(>)"
    endCaptures:
      "0":
        name: "meta.brace.angle.puck"
    name: "meta.type.parameters.puck"
    patterns: [
      {
        match: "\\b(:)\\b"
        name: "keyword.other.puck"
      }
      {
        include: "#comment"
      }
      {
        include: "#type-bound"
      }
    ]
  "type-primitive":
    match: "\\b(Self)\\b"
    name: "storage.type.source.puck"
  "variable-declaration":
    begin: "\\b([a-zA-Z_]\\w*)\\s*"
    beginCaptures:
      "1":
        name: "variable.other.constant.puck"
    end: "(?=$|[;,)])"
    name: "meta.variable.declaration.puck"
    patterns: [
      {
        include: "#type-annotation"
      }
      {
        include: "#comment"
      }
      {
        include: "#variable-initializer"
      }
    ]
  "variable-initializer":
    begin: "(=)"
    beginCaptures:
      "1":
        name: "keyword.operator.assignment.puck"
    end: "(?=$|[;,)])"
    name: "meta.variable.declaration.initializer.puck"
    patterns: [
      {
        include: "#expression"
      }
    ]
scopeName: "source.puck"
